// qguiapplication.sip generated by MetaSIP on Wed Aug 21 06:30:43 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QGuiApplication : QCoreApplication
{
%TypeHeaderCode
#include <qguiapplication.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QOpenGLShaderProgram, &sipType_QOpenGLShaderProgram, -1, 1},
        {sipName_QAbstractTextDocumentLayout, &sipType_QAbstractTextDocumentLayout, -1, 2},
    #if defined(SIP_FEATURE_PyQt_SessionManager)
        {sipName_QSessionManager, &sipType_QSessionManager, -1, 3},
    #else
        {0, 0, -1, 3},
    #endif
        {sipName_QOpenGLContextGroup, &sipType_QOpenGLContextGroup, -1, 4},
        {sipName_QTextObject, &sipType_QTextObject, 21, 5},
        {sipName_QClipboard, &sipType_QClipboard, -1, 6},
        {sipName_QWindow, &sipType_QWindow, -1, 7},
        {sipName_QInputMethod, &sipType_QInputMethod, -1, 8},
        {sipName_QStyleHints, &sipType_QStyleHints, -1, 9},
        {sipName_QOpenGLShader, &sipType_QOpenGLShader, -1, 10},
        {sipName_QOpenGLContext, &sipType_QOpenGLContext, -1, 11},
        {sipName_QGuiApplication, &sipType_QGuiApplication, -1, 12},
        {sipName_QDrag, &sipType_QDrag, -1, 13},
        {sipName_QStandardItemModel, &sipType_QStandardItemModel, -1, 14},
        {sipName_QPdfWriter, &sipType_QPdfWriter, -1, 15},
        {sipName_QMovie, &sipType_QMovie, -1, 16},
        {sipName_QScreen, &sipType_QScreen, -1, 17},
        {sipName_QTextDocument, &sipType_QTextDocument, -1, 18},
        {sipName_QSyntaxHighlighter, &sipType_QSyntaxHighlighter, -1, 19},
        {0, 0, -1, 20},
        {sipName_QValidator, &sipType_QValidator, 25, -1},
        {sipName_QTextFrame, &sipType_QTextFrame, 23, 22},
        {sipName_QTextBlockGroup, &sipType_QTextBlockGroup, 24, -1},
        {sipName_QTextTable, &sipType_QTextTable, -1, -1},
        {sipName_QTextList, &sipType_QTextList, -1, -1},
        {sipName_QIntValidator, &sipType_QIntValidator, -1, 26},
        {sipName_QRegExpValidator, &sipType_QRegExpValidator, -1, 27},
        {sipName_QDoubleValidator, &sipType_QDoubleValidator, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:

	QGuiApplication(int& argc, char** argv);

    QGuiApplication(SIP_PYLIST argv /DocType="list-of-str"/) /PostHook=__pyQtQAppHook__/ [(int &argc, char **argv, int = ApplicationFlags)];
%MethodCode
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGuiApplication(nargc, argv, QCoreApplication::ApplicationFlags);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_update_argv_list(a0, argc, argv);
        }
%End

    virtual ~QGuiApplication();
    static QWindowList allWindows();
    static QWindowList topLevelWindows();
    static QWindow *topLevelAt(const QPoint &pos);
    static QString platformName();
    static QWindow *focusWindow();
    static QObject *focusObject();
    static QScreen *primaryScreen();
    static QList<QScreen*> screens();
    static QCursor *overrideCursor();
    static void setOverrideCursor(const QCursor &);
    static void changeOverrideCursor(const QCursor &);
    static void restoreOverrideCursor();
    static QFont font();
    static void setFont(const QFont &);
    static QClipboard *clipboard();
    static QPalette palette();
    static void setPalette(const QPalette &pal);
    static Qt::KeyboardModifiers keyboardModifiers();
    static Qt::KeyboardModifiers queryKeyboardModifiers();
    static Qt::MouseButtons mouseButtons();
    static void setLayoutDirection(Qt::LayoutDirection direction);
    static Qt::LayoutDirection layoutDirection();
    static bool isRightToLeft();
    static bool isLeftToRight();
    static void setDesktopSettingsAware(bool on);
    static bool desktopSettingsAware();
    static void setQuitOnLastWindowClosed(bool quit);
    static bool quitOnLastWindowClosed();
    static int exec() /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    static int exec() /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,ReleaseGIL/;
%End
    virtual bool notify(QObject *, QEvent *);

signals:
    void fontDatabaseChanged();
    void screenAdded(QScreen *screen);
    void lastWindowClosed();
    void focusObjectChanged(QObject *focusObject);
%If (PyQt_SessionManager)
    void commitDataRequest(QSessionManager &sessionManager);
%End
%If (PyQt_SessionManager)
    void saveStateRequest(QSessionManager &sessionManager);
%End
    void focusWindowChanged(QWindow *focusWindow);

public:
    static void setApplicationDisplayName(const QString &name);
    static QString applicationDisplayName();
    static QWindow *modalWindow();
    qreal devicePixelRatio() const;
%If (PyQt_SessionManager)
    bool isSessionRestored() const;
%End
%If (PyQt_SessionManager)
    QString sessionId() const;
%End
%If (PyQt_SessionManager)
    QString sessionKey() const;
%End
%If (PyQt_SessionManager)
    bool isSavingSession() const;
%End

protected:
    virtual bool event(QEvent *);

private:
    QGuiApplication(const QGuiApplication &);
};

%ModuleHeaderCode
// Imports from QtCore.
typedef char **(*pyqt5_from_argv_list_t)(PyObject *, int &);
extern pyqt5_from_argv_list_t pyqt5_from_argv_list;

typedef void (*pyqt5_update_argv_list_t)(PyObject *, int, char **);
extern pyqt5_update_argv_list_t pyqt5_update_argv_list;
%End

%ModuleCode
// Imports from QtCore.
pyqt5_from_argv_list_t pyqt5_from_argv_list;
pyqt5_update_argv_list_t pyqt5_update_argv_list;
%End

%PostInitialisationCode
// Imports from QtCore.
pyqt5_from_argv_list = (pyqt5_from_argv_list_t)sipImportSymbol("pyqt5_from_argv_list");
pyqt5_update_argv_list = (pyqt5_update_argv_list_t)sipImportSymbol("pyqt5_update_argv_list");
%End
